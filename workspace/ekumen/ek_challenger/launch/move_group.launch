<?xml version="1.0" encoding="UTF-8"?>
<launch>

  <arg name="side" />

  <!-- Selector for tiago type -->
  <arg name="arm_left" default="True"/>
  <arg name="arm_right" default="True"/>
  <arg name="end_effector_left" default="pal-gripper"/>
  <arg name="end_effector_right" default="pal-gripper"/>
  <arg name="ft_sensor_left" default="schunk-ft"/>
  <arg name="ft_sensor_right" default="schunk-ft"/>
  <arg name="laser_model" default="sick-571"/>
  <arg name="camera_model" default="orbbec-astra"/>

  <!-- move_group settings -->
  <arg name="allow_trajectory_execution" default="true"/>
  <arg name="max_safe_path_cost" default="1"/>
  <arg name="jiggle_fraction" default="0.05" />
  <arg name="publish_monitored_planning_scene" default="true"/>
  <arg name="capabilities" default="move_group/ExecuteTaskSolutionCapability"/>
  <arg name="disable_capabilities" default=""/>

  <group ns="$(arg side)">

    <!-- Planning Functionality -->
    <include ns="move_group" file="$(find tiago_dual_moveit_config)/launch/planning_pipeline.launch.xml">
      <arg name="pipeline" value="ompl" />
    </include>


    <!-- Trajectory Execution Functionality -->
    <arg name="file_suffix" value="$(eval ('no-arm-left' if not arm_left else end_effector_left + ('' if not ft_sensor_left else '_'+ft_sensor_left)) + '_' + ('no-arm-right' if not arm_right else end_effector_right + ('' if not ft_sensor_right else '_'+ft_sensor_right)))"/>
    <include ns="move_group" file="$(find tiago_dual_moveit_config)/launch/trajectory_execution.launch.xml">
      <arg name="moveit_manage_controllers" value="true" />
      <arg name="moveit_controller_manager" value="tiago_dual" />
      <arg name="robot_sufix" value="$(arg file_suffix)" />
    </include>

    <!-- Start the actual move_group node/action server -->
    <node name="move_group" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen">

      <!-- Set the display variable, in case OpenGL code is used internally -->
      <env name="DISPLAY" value="$(optenv DISPLAY :0)" />

      <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
      <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
      <param name="jiggle_fraction" value="$(arg jiggle_fraction)" />
      <param name="capabilities" value="$(arg capabilities)"/>
      <param name="disable_capabilities" value="$(arg disable_capabilities)"/>

      <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
      <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
      <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
      <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
      <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />

      <remap from="/$(arg side)/arm_left_controller/follow_joint_trajectory/goal" to="/arm_left_controller/follow_joint_trajectory/goal" />
      <remap from="/$(arg side)/arm_left_controller/follow_joint_trajectory/cancel" to="/arm_left_controller/follow_joint_trajectory/cancel" />
      <remap from="/$(arg side)/arm_left_controller/follow_joint_trajectory/feedback" to="/arm_left_controller/follow_joint_trajectory/feedback" />
      <remap from="/$(arg side)/arm_left_controller/follow_joint_trajectory/result" to="/arm_left_controller/follow_joint_trajectory/result" />
      <remap from="/$(arg side)/arm_left_controller/follow_joint_trajectory/status" to="/arm_left_controller/follow_joint_trajectory/status" />

      <remap from="/$(arg side)/arm_right_controller/follow_joint_trajectory/goal" to="/arm_right_controller/follow_joint_trajectory/goal" />
      <remap from="/$(arg side)/arm_right_controller/follow_joint_trajectory/cancel" to="/arm_right_controller/follow_joint_trajectory/cancel" />
      <remap from="/$(arg side)/arm_right_controller/follow_joint_trajectory/feedback" to="/arm_right_controller/follow_joint_trajectory/feedback" />
      <remap from="/$(arg side)/arm_right_controller/follow_joint_trajectory/result" to="/arm_right_controller/follow_joint_trajectory/result" />
      <remap from="/$(arg side)/arm_right_controller/follow_joint_trajectory/status" to="/arm_right_controller/follow_joint_trajectory/status" />

      <remap from="/$(arg side)/torso_controller/follow_joint_trajectory/goal" to="/torso_controller/follow_joint_trajectory/goal" />
      <remap from="/$(arg side)/torso_controller/follow_joint_trajectory/cancel" to="/torso_controller/follow_joint_trajectory/cancel" />
      <remap from="/$(arg side)/torso_controller/follow_joint_trajectory/feedback" to="/torso_controller/follow_joint_trajectory/feedback" />
      <remap from="/$(arg side)/torso_controller/follow_joint_trajectory/result" to="/torso_controller/follow_joint_trajectory/result" />
      <remap from="/$(arg side)/torso_controller/follow_joint_trajectory/status" to="/torso_controller/follow_joint_trajectory/status" />

      <remap from="/$(arg side)/head_controller/follow_joint_trajectory/goal" to="/head_controller/follow_joint_trajectory/goal" />
      <remap from="/$(arg side)/head_controller/follow_joint_trajectory/cancel" to="/head_controller/follow_joint_trajectory/cancel" />
      <remap from="/$(arg side)/head_controller/follow_joint_trajectory/feedback" to="/head_controller/follow_joint_trajectory/feedback" />
      <remap from="/$(arg side)/head_controller/follow_joint_trajectory/result" to="/head_controller/follow_joint_trajectory/result" />
      <remap from="/$(arg side)/head_controller/follow_joint_trajectory/status" to="/head_controller/follow_joint_trajectory/status" />

      <remap from="/$(arg side)/gripper_left_controller/follow_joint_trajectory/goal" to="/gripper_left_controller/follow_joint_trajectory/goal" />
      <remap from="/$(arg side)/gripper_left_controller/follow_joint_trajectory/cancel" to="/gripper_left_controller/follow_joint_trajectory/cancel" />
      <remap from="/$(arg side)/gripper_left_controller/follow_joint_trajectory/feedback" to="/gripper_left_controller/follow_joint_trajectory/feedback" />
      <remap from="/$(arg side)/gripper_left_controller/follow_joint_trajectory/result" to="/gripper_left_controller/follow_joint_trajectory/result" />
      <remap from="/$(arg side)/gripper_left_controller/follow_joint_trajectory/status" to="/gripper_left_controller/follow_joint_trajectory/status" />

      <remap from="/$(arg side)/gripper_right_controller/follow_joint_trajectory/goal" to="/gripper_right_controller/follow_joint_trajectory/goal" />
      <remap from="/$(arg side)/gripper_right_controller/follow_joint_trajectory/cancel" to="/gripper_right_controller/follow_joint_trajectory/cancel" />
      <remap from="/$(arg side)/gripper_right_controller/follow_joint_trajectory/feedback" to="/gripper_right_controller/follow_joint_trajectory/feedback" />
      <remap from="/$(arg side)/gripper_right_controller/follow_joint_trajectory/result" to="/gripper_right_controller/follow_joint_trajectory/result" />
      <remap from="/$(arg side)/gripper_right_controller/follow_joint_trajectory/status" to="/gripper_right_controller/follow_joint_trajectory/status" />

      <remap from="/$(arg side)/joint_states" to="/joint_states" />

    </node>

    <node name="task_constructor_$(arg side)" pkg="ek_challenger" type="task_constructor_node"
          respawn="true" output="screen">
      <remap from="/$(arg side)/joint_states" to="/joint_states" />
    </node>

  </group>

</launch>
